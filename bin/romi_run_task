#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import glob
import json
import os
import subprocess
import tempfile
from warnings import warn

import toml
from romiscan.modules import MODULES, TASKS

LUIGI_CMD = "luigi"
LOGLEV = ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
HELP_URL = "https://docs.romi-project.eu/Scanner/user_guide/pipelines/"

LOGGING_CFG = """
    [loggers]
    keys=root
    
    [logger_root]
    handlers=console
    qualname=root
    level={}
    
    [handlers]
    keys=console
    
    [handler_console]
    class=logging.StreamHandler
    formatter=color
    level={}
    stream  : ext://sys.stdout
    
    [formatters]
    keys=color
    
    [formatter_color]
    class=colorlog.ColoredFormatter
    format=%(log_color)s%(levelname)-8s%(reset)s %(bg_blue)s[%(name)s]%(reset)s %(message)s from fileConfig
    datefmt=%m-%d %H:%M:%S
    """


def parsing():
    parser = argparse.ArgumentParser(
        description='Run a Romi task for a dataset.',
        epilog="""See {} for help with configuration files.
                                     """.format(HELP_URL))

    parser.add_argument('task', metavar='task', type=str,
                        choices=TASKS,
                        help=f"Luigi task to run: {', '.join(TASKS)}")

    parser.add_argument('db_path', metavar='dataset_path', type=str,
                        help='FSDB scan dataset to process (path)')

    parser.add_argument('--config', dest='config', default="",
                        help="""configuration file or directory location.
                        If a file, reads config from it
                        If a folder, concatenates all configuration files in it.
                        By default, try read from the scan dataset directory (backup
                        or manually copied).
                        """)

    parser.add_argument('--luigicmd', dest='luigicmd', default=LUIGI_CMD,
                        help=f"luigi command, default: `{LUIGI_CMD}`")

    parser.add_argument('--module', dest='module', default=None,
                        help="module for the task")

    parser.add_argument('--log-level', dest='log_level', default='INFO',
                        choices=LOGLEV,
                        help="defines level of message logging.")

    parser.add_argument('--local-scheduler', dest='ls', action="store_true",
                        default=True,
                        help='Luigi CLI argument')
    return parser


if __name__ == "__main__":
    """ This script implement the ROMI tasks CLI.

    It is intended to be used as the main program to run the various tasks defined
    in ``MODULES``.

    It uses ``luigi`` paradigm with ``Task``, ``Target`` & ``Parameters`` defined
    for each ``RomiTask`` in their module.

    The program uses two config files stored in the root datasets folder:
      - `scan.toml`: the last configuration used with the 'Scan' module;
      - `pipeline.toml`: the last configuration used with any other module.
    They defines tasks parameters that will override the default tasks parameters
    using luigi's "config ingestion" [^1] and ROMI configuration classes.

    The tasks "Scan" & "VirtualScan" requires an non-existent or empty datasets
    directory.
    The other tasks requires a datasets directory populated by images from a "Scan"
    or "VirtualScan" task.
    
    References
    ----------
    [^1]: https://luigi.readthedocs.io/en/stable/configuration.html#parameters-from-config-ingestion

    """
    args = parsing().parse_args()
    config = {}

    # Try to load backup configurations:
    scan_last_cfg = os.path.join(args.db_path, "scan.toml")
    pipeline_last_cfg = os.path.join(args.db_path, "pipeline.toml")
    if os.path.isfile(scan_last_cfg):
        config = {**config, **toml.load(scan_last_cfg)}
    if os.path.isfile(pipeline_last_cfg):
        # Raise an IOError when task 'Scan' is required in a folder with a backup of a processing pipeline
        # This probably means that you are trying to use a datasets that is not EMPTY!
        if args.task in ["Scan", "VirtualScan", "CalibrationScan"]:
            print(
                f"WARNING: task '{args.task}' was called in a datasets folder with a backup of a processing pipeline!")
            print(f"WARNING: datasets folder is '{args.db_path}'")
            raise IOError
        config = {**config, **toml.load(pipeline_last_cfg)}

    # Process given configuration directory of file, if any:
    if os.path.isdir(args.config):
        # Read config (json or toml)
        for f in glob.glob(os.path.join(args.config, "*.toml")):
            try:
                c = toml.load(open(f))
                config = {**config, **c}
            except:
                warn("Could not process config file: %s" % f)
        for f in glob.glob(os.path.join(args.config, "*.json")):
            try:
                c = json.load(open(f))
                config = {**config, **c}
            except:
                warn("Could not process config file: %s" % f)
    elif os.path.isfile(args.config):
        try:
            c = json.load(open(args.config))
        except:
            try:
                c = toml.load(open(args.config))
            except:
                raise IOError("Could not load config file")
        config = {**config, **c}
    else:
        print("Using a PREVIOUS configuration.")

    # TODO: Not really sure what happens here...
    if args.module is not None:
        module = args.module
    else:
        module = MODULES[args.task]

    # Handle datasets directory:
    #  - if a "Scan" or "VirtualScan" tasks is required, a directory should be created
    #  - else, check it exists
    d = args.db_path
    if args.task == "Scan" or args.task == 'VirtualScan' or args.task == 'CalibrationScan':
        try:
            os.mkdir(d)
        except FileExistsError as e:
            # pass  # an error should never go silent...
            if not os.listdir(d) == []:
                print(e)
            else:
                print(f"Using empty datasets directory: {d}")
        cfgname = "scan.toml"
    else:
        assert (os.path.isdir(d))
        cfgname = "pipeline.toml"

    # Generate logging config for luigi ("logging_config.toml"):
    logging_config = LOGGING_CFG.format(args.log_level, args.log_level)

    with tempfile.TemporaryDirectory() as tmpd:
        # Create a "logging_config.toml" TOML file to be used by `luigi` for logging
        logging_file_path = os.path.join(tmpd, "logging_config.toml")
        with open(logging_file_path, 'w') as f:
            f.write(logging_config)
        # Create the "scan.toml" OR "pipeline.toml" backup config file:
        file_path = os.path.join(d, cfgname)
        # The following return codes are the recommended exit codes for Luigi
        # They are in increasing level of severity (for most applications)
        # https://luigi.readthedocs.io/en/stable/configuration.html#retcode
        config["retcode"] = {"already_running": 10, "missing_data": 20,
                             "not_run": 25, "task_failed": 30,
                             "scheduling_error": 35, "unhandled_exception": 40}
        toml.dump(config, open(file_path, 'w'))
        # Set ENV variables to provide the logging TOML file path to `luigi`:
        env = {
            "LUIGI_CONFIG_PARSER": "toml",
            "LUIGI_CONFIG_PATH": file_path
        }
        # Defines the command to run and use it in a subprocess:
        # "--DatabaseConfig-scan args.db_path" set the value of `scan` for the `DatabaseConfig` Config class
        # https://luigi.readthedocs.io/en/stable/parameters.html#setting-parameter-value-for-other-classes
        cmd = [args.luigicmd, "--logging-conf-file", logging_file_path,
               "--module", module, args.task,
               "--DatabaseConfig-scan", args.db_path]
        if args.ls:
            cmd.append("--local-scheduler")
        subprocess.run(cmd, env={**os.environ, **env}, check=True)
        # TODO: try to use `luigi.build` instead of CLI ?
        # Next line would require to import all tasks defined in TASKS
        # MyTask = type(args.task, (), {})  # `MyTask` is now a class `args.task`
        # luigi_run_result = luigi.build(MyTask(), detailed_summary=True)
        # print(luigi_run_result.summary_text)
