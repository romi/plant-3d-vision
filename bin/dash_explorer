#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import argparse
import sys
from pathlib import Path

import numpy as np
import plotly.graph_objects as go
from dash import Dash
from dash import Input
from dash import Output
from dash import callback
from dash import dcc
from dash import html

from plant3dvision.evaluation import is_radians
from plant3dvision.utils import locate_task_filesets
from plant3dvision.visu import plotly_direction_data
from plant3dvision.visu import plotly_mesh_data
from plant3dvision.visu import plotly_pointcloud_data
from plant3dvision.visu import plotly_treegraph_data
from plant3dvision.visu import plotly_vert_sequences
from plantdb import FSDB
from plantdb.io import read_graph
from plantdb.io import read_json
from plantdb.io import read_point_cloud
from plantdb.io import read_triangle_mesh
from plantdb.log import configure_logger

TASKS = [
    "PointCloud",
    "TriangleMesh",
    "CurveSkeleton",
    "TreeGraph",
    "AnglesAndInternodes",
]
TASKS_OBJECTS = [
    "PointCloud",
    "TriangleMesh",
    "TreeGraph",
    "FruitDirection",
    "StemDirection",
]

FONT_FAMILY = '"Nunito Sans", verdana, arial, sans-serif'


def parsing():
    parser = argparse.ArgumentParser(description="Explore the tasks outputs on selected dataset.")
    parser.add_argument('dataset', type=str,
                        help="Path to the dataset to explore (directory)")

    app_args = parser.add_argument_group("Dash app options")
    app_args.add_argument('--port', type=int, default=8080,
                          help="Port used to serve the application.")
    app_args.add_argument('--host', type=str, default="127.0.0.1",
                          help="Port used to serve the application.")
    app_args.add_argument('--docker', action="store_true",
                          help="Use it to indicate that the app in running in a container.")

    return parser


def get_3d_data(dataset):
    """Load the computed data from tasks PointCloud, TriangleMesh, TreeGraph & AnglesAndInternodes.

    Parameters
    ----------
    dataset : str
        The path to the dataset containing the data to load.
        Should be in a local ROMI database (FSDB).

    Returns
    -------
    dict
        A dictionary containing the loaded 3D data to render.
    """
    global logger  # use the global logger

    dataset = Path(dataset)
    db_path = dataset.parent  # the root of the database is one level (directory) higher.
    dataset_name = dataset.name  # name of the dataset is the name of the directory

    # Connect to the local ROMI database:
    db = FSDB(db_path)
    db.connect()
    # Get the `Scan` instance, should exist:
    scan = db.get_scan(dataset_name, create=False)
    # Find the filesets corresponding to the tasks:
    fileset_names = locate_task_filesets(scan, TASKS)

    # - Try to load the result of the `PointCloud` task:
    fs = scan.get_fileset(fileset_names['PointCloud'])
    try:
        pcd_file = fs.get_file('PointCloud')
        pcd = read_point_cloud(pcd_file)
    except:
        logger.error(f"Could not find a 3D point cloud to load!")
        sys.exit("It seems that no reconstruction pipeline have been run on this dataset!")
    else:
        logger.info(f"Found a 3D point cloud to load: '{pcd_file.filename}'.")

    # - Try to load the result of the `TriangleMesh` task:
    mesh = None
    fs = scan.get_fileset(fileset_names['TriangleMesh'])
    try:
        mesh_file = fs.get_file('TriangleMesh')
        mesh = read_triangle_mesh(mesh_file)
    except:
        logger.warning(f"Could not find a 3D triangular mesh to load!")
    else:
        logger.info(f"Found a 3D triangular mesh to load: '{mesh_file.filename}'.")

    # - Try to load the result of the `TreeGraph` task:
    tree = None
    fs = scan.get_fileset(fileset_names['TreeGraph'])
    try:
        tree_file = fs.get_file('TreeGraph')
        tree = read_graph(tree_file)
    except:
        logger.warning(f"Could not find a 3D tree graph to load!")
    else:
        logger.info(f"Found a 3D tree graph to load: '{tree_file.filename}'.")

    # - Try to load the estimated fruit directions from the `AnglesAndInternodes` task:
    fruit_dir = None
    fs = scan.get_fileset(fileset_names['AnglesAndInternodes'])
    try:
        fruit_dir_file = fs.get_file('fruit_direction')
        fruit_dir = read_json(fruit_dir_file)
    except:
        logger.warning(f"Could not find a list of fruit directions to load!.")
    else:
        logger.info(f"Found a list of fruit directions to load: '{fruit_dir_file.filename}'.")

    # - Try to load the estimated stem directions from the `AnglesAndInternodes` task:
    stem_dir = None
    fs = scan.get_fileset(fileset_names['AnglesAndInternodes'])
    try:
        stem_dir_file = fs.get_file('stem_direction')
        stem_dir = read_json(stem_dir_file)
    except:
        logger.warning(f"Could not find a list of stem directions to load!.")
    else:
        logger.info(f"Found a list of stem directions to load: '{stem_dir_file.filename}'.")

    db.disconnect()  # disconnect from the database
    return {"PointCloud": pcd, "TriangleMesh": mesh, "TreeGraph": tree,
            "FruitDirection": fruit_dir, "StemDirection": stem_dir}


def get_global_range(pcd, mesh):
    """Compute the axis range to preserve for 3D viewer using the point cloud and triangular mesh.

    Parameters
    ----------
    pcd : open3d.geometry.PointCloud
        The loaded point cloud object.
    mesh : open3d.geometry.TriangleMesh
        The loaded triangular mesh object.

    Returns
    -------
    numpy.ndarray
        The minimum XYZ range.
    numpy.ndarray
        The maximum XYZ range.
    """
    # Get the point cloud coordinates and get the mini & maxi for XYZ:
    pcd_arr = np.array(pcd.points)
    min_pcd, max_pcd = np.min(pcd_arr, axis=0), np.max(pcd_arr, axis=0)
    # Try to get the triangular mesh mini & maxi for XYZ if defined, else set it to NaN:
    if mesh is not None:
        # Get triangular mesh vertices coordinates and get the min & max for XYZ:
        mesh_pts = np.array(mesh.vertices)
        min_mesh, max_mesh = np.min(mesh_pts, axis=0), np.max(mesh_pts, axis=0)
    else:
        min_mesh, max_mesh = np.array([np.nan, np.nan, np.nan]), np.array([np.nan, np.nan, np.nan])
    # Returns the mini & maxi for XYZ
    return np.nanmin([min_pcd, min_mesh], axis=0), np.nanmax([max_pcd, max_mesh], axis=0)


def get_axes_ratio(mini, maxi):
    """Compute the XYZ axes ratio for the 3D viewer.

    Parameters
    ----------
    mini : numpy.ndarray
        The minimum XYZ range.
    maxi : numpy.ndarray
        The maximum XYZ range.

    Returns
    -------
    numpy.ndarray
        The XYZ axes ratio.
    """
    axes_range = maxi - mini
    return axes_range / np.max(axes_range)


def get_graph_objects(data):
    """Create `plotly.graph_objects` corresponding to each 3D structures to render.

    Parameters
    ----------
    data : dict
        A dictionary containing the plotly 3D structures to render (`plotly.graph_objects`).

    Returns
    -------
    dict
        The dictionary with `plotly.graph_objects` to render.
    """
    go_data = {obj: None for obj in TASKS_OBJECTS}

    if data['PointCloud'] is not None:
        go_data['PointCloud'] = plotly_pointcloud_data(data['PointCloud'], n_pts=9000, showlegend=False)
    if data['TriangleMesh'] is not None:
        go_data['TriangleMesh'] = plotly_mesh_data(data['TriangleMesh'], showlegend=False)
    if data['TreeGraph'] is not None:
        go_data['TreeGraph'] = plotly_treegraph_data(data["TreeGraph"],
                                                     legendgroup='tree', legendgrouptitle={'text': 'TreeGraph'})
    if data['FruitDirection'] is not None:
        fruit_dir = data["FruitDirection"]
        go_data['FruitDirection'] = plotly_direction_data(fruit_dir["fruit_dirs"], fruit_dir["bp_coords"], "fruit",
                                                          legendgroup='fruit',
                                                          legendgrouptitle={'text': 'FruitDirection'})
    if data['StemDirection'] is not None:
        stem_dir = data["StemDirection"]
        go_data['StemDirection'] = plotly_direction_data(stem_dir["stem_dirs"], stem_dir["bp_coords"], "stem",
                                                          legendgroup='stem',
                                                          legendgrouptitle={'text': 'StemDirection'})

    return go_data


def select_go_data(checklist, go_data, hoverdata=None):
    """Select the 3D data to render.

    Parameters
    ----------
    checklist : list
        The list of selected 3D structures to render.
    go_data : dict
        A dictionary containing the plotly 3D structures to render.
    hoverdata : int, optional
        The fruit id of the fruit interval to highlight.

    Returns
    -------
    list
        The list of `plotly.graph_objects` to display in 3D viewer.
    """
    selected_go_data = []
    for name in checklist:
        if isinstance(go_data[name], list):
            selected_go_data.extend(go_data[name])
        else:
            selected_go_data.append(go_data[name])

    if hoverdata is not None:
        global data
        fruit_idx = hoverdata['points'][0]['pointIndex']
        fruit_dir = data["FruitDirection"]
        big_fruits = plotly_direction_data(
            {f: fruit_dir["fruit_dirs"][str(f)] for f in range(fruit_idx, fruit_idx + 2)},
            {f: fruit_dir["bp_coords"][str(f)] for f in range(fruit_idx, fruit_idx + 2)},
            "big fruit", line_kwargs={"width": 25},
            showlegend=False)
        selected_go_data.extend(big_fruits)

    return selected_go_data


def get_sequences_data(dataset):
    """Get the angle and internode sequences from the `AnglesAndInternodes` task.

    Parameters
    ----------
    dataset :  str
        The path to the dataset containing the data to load.
        Should be in a local ROMI database (FSDB).

    Returns
    -------
    dict
        A dictionary containing the loaded angle and internode sequences.
    """
    global logger

    dataset = Path(dataset)
    db_path = dataset.parent  # the root of the database is one level (directory) higher.
    dataset_name = dataset.name  # name of the dataset is the name of the directory

    # Connect to the local ROMI database:
    db = FSDB(db_path)
    db.connect()
    # Get the `Scan` instance, should exist:
    scan = db.get_scan(dataset_name, create=False)
    # Find the fileset corresponding to the task:
    fileset_names = locate_task_filesets(scan, TASKS)
    # Load the measures fileset:
    measures_fs = scan.get_fileset(fileset_names['AnglesAndInternodes'])
    measures_file = measures_fs.get_file('AnglesAndInternodes')
    measures = read_json(measures_file)
    try:
        assert measures != {}
    except:
        measures = {"angles": [np.nan], "internodes": [np.nan]}
        logger.warning(f"No AnglesAndInternodes sequences found!")
    else:
        angles = measures["angles"]
        internodes = measures["internodes"]
        logger.info(f"Found a sequence of {len(angles)} angles.")
        logger.info(f"Found a sequence of {len(internodes)} internodes.")
        # Convert angles if in radians
        if is_radians(measures["angles"]):
            from math import degrees
            measures["angles"] = list(map(degrees, measures["angles"]))
            logger.info("Converted estimated angles from radians to degrees.")

    db.disconnect()  # disconnect from the database
    return {'angles': measures["angles"], 'internodes': measures["internodes"]}


def dash_app(data, measures):
    """Dash application.

    Parameters
    ----------
    data : dict
        A dictionary containing the loaded 3D data to render.
    measures : dict
        A dictionary containing the loaded angle and internode sequences.

    Returns
    -------
    dash.Dash
        The dash application.
    """
    # - Create the `plotly.graph_objects` corresponding to each 3D structures to render.
    go_data = get_graph_objects(data)

    # - Initialize the checkboxes:
    init_checklist = [k for k, v in go_data.items() if v is not None]
    checklist = dict(zip(go_data.keys(), init_checklist))
    # No need to initialize the '3d-viewer' figure as the `update_3d_viewer` callback will take care of it!
    # No need to initialize the 'sequences' figure as the `update_sequence_graph` callback will take care of it!

    # - Create the Dash app:
    app = Dash(__name__)
    # - Create the app layout:
    #   * create two rows with a CSS grid:
    #     1. first row is the top title
    #     2. second row is the two-column flexbox
    app.layout = html.Div([
        # Add the 'Nunito Sans' font from Google:
        html.Link(href="https://fonts.googleapis.com/css?family=Nunito Sans", rel="stylesheet"),
        # Main title:
        html.H1('Plant reconstruction explorer',
                style={'textAlign': 'center', 'padding': '0px 10px', 'margin': '0px',
                       'background-color': 'rgb(30 179 123)'}),
        # Two-column grid layout with 3D viewer (left column) and sequences graphs (right column):
        html.Div([
            # 3D viewer title:
            html.Div([
                html.H2(children='3D viewer',
                        style={'textAlign': 'center', 'padding': '0px 5px', 'margin': '0px',
                               'background-color': 'rgb(200 200 200)'}),
            ], style={'padding': '2px'}),
            # Sequence graphs title:
            html.Div([
                html.H2(children='Sequences viewer',
                        style={'textAlign': 'center', 'padding': '0px 5px', 'margin': '0px',
                               'background-color': 'rgb(200 200 200)'}),
            ], style={'padding': '2px'}),
            # 3D viewer options:
            html.Div([
                "Structures to display: ",
                dcc.Checklist(TASKS_OBJECTS, inline=True, value=init_checklist, id='checklist-selection',
                              style={'flex': 1, 'padding': '0px 0px 0px 10px', 'margin': '0px'}),
            ], style={'display': 'flex', 'flexDirection': 'row', 'padding': '0px', 'margin': '0px'}),
            # Sequence graphs options:
            html.Div([
                "Y-axis: ",
                dcc.Dropdown(['index', 'distance'], value='index', id="y-axis-dropdown",
                             clearable=False, multi=False,
                             style={'flex': 1, 'padding': '0px 0px 0px 10px', 'margin': '0px'}),
            ], style={'display': 'flex', 'flexDirection': 'row', 'padding': '0px', 'margin': '0px', "width": '15em'}),
            # 3D viewer:
            html.Div([
                dcc.Graph(id='3d-viewer',
                          style={'width': '49vw', 'height': '89vh'}, config={'responsive': True})
            ], style={'padding': '0px', 'margin': '0px'}),
            # Sequence graphs:
            html.Div([
                dcc.Graph(id='sequences',
                          style={'width': '49vw', 'height': '89vh'})
            ], style={'padding': '0px', 'margin': '0px'}),
        ], style={'display': 'grid', 'grid-template-columns': '1fr 1fr', 'padding': '0px', 'margin': '0px'},
        ),
    ], style={'display': 'grid', 'padding': '0px', 'margin': '0px', 'font-family': FONT_FAMILY,
              'background-color': 'rgb(243, 243, 243)'}
    )

    @callback(
        Output('3d-viewer', 'figure'),
        Input('checklist-selection', 'value'),
        Input('sequences', 'hoverData'),
        Input('sequences', 'selectedData'),
    )
    def update_3d_viewer(value, hoverData, selectedData):
        global mini, maxi, axes_ratio
        if selectedData is not None:
            hoverData = selectedData
        fig = go.Figure(data=select_go_data(value, go_data, hoverData))
        fig.update_scenes(aspectmode='manual',
                          xaxis={'range': (mini[0], maxi[0])}, aspectratio_x=axes_ratio[0],
                          yaxis={'range': (mini[1], maxi[1])}, aspectratio_y=axes_ratio[1],
                          zaxis={'range': (mini[2], maxi[2])}, aspectratio_z=axes_ratio[2])
        fig.update_layout(uirevision='none', font_family=FONT_FAMILY, paper_bgcolor="#F3F3F3",
                          margin={'t': 25, 'b': 5})
        return fig

    @callback(
        Output("sequences", "figure"),
        Input("y-axis-dropdown", "value"),
    )
    def update_sequence_graph(value):
        global data
        global measures
        if value == 'distance':
            vert_axis = np.cumsum(measures['internodes'])
            y_axis_label = "Cumulative internode distances (mm)."
        else:
            vert_axis = None
            y_axis_label = "Interval index"

        seq_fig = plotly_vert_sequences(measures, vert_axis, y_axis_label, marker_kwargs={'size': 10})
        seq_fig.update_layout(uirevision='value', font_family=FONT_FAMILY, paper_bgcolor="#F3F3F3",
                              margin={'t': 25, 'b': 5})
        return seq_fig

    return app


if __name__ == '__main__':
    # - Parse the input arguments to variables:
    parser = parsing()
    args = parser.parse_args()
    # If running in a Docker container, set the host ip to '0.0.0.0':
    if args.docker:
        args.host = "0.0.0.0"

    # - Configure a logger from this application:
    logger = configure_logger('dash_explorer')

    # - Load the 3D viewer data and get the display range:
    data = get_3d_data(args.dataset)
    mini, maxi = get_global_range(data["PointCloud"], data["TriangleMesh"])
    axes_ratio = get_axes_ratio(mini, maxi)
    # - Load the sequences:
    measures = get_sequences_data(args.dataset)

    # - Start the Dash app:
    app = dash_app(data, measures)
    app.run(debug=True, host=args.host, port=args.port)
